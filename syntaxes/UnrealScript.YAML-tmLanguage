# [PackageDev] target_format: json, ext: tmLanguage
# Syntax highlighting for the UnrealScript language:
# https://docs.unrealengine.com/udk/Three/UnrealScriptHome.html
---
name: UnrealScript Syntax Definition (UC)
fileTypes: [.uc, .uci]
scopeName: source.uc
uuid: 809240e6-4c3b-477f-8bcf-2eeddb00e050

foldingStartMarker: \{\s*$
foldingStopMarker: ^\s*\}

patterns:
  - include: '#comment'
  - include: '#declarations'

repository:
  comment:
    patterns:
      - include: '#blockComment'

      - name: comment.line.double-slash.uc
        begin: //
        end: \n

  blockComment:
    patterns:
      - name: comment.block.documentation.uc
        begin: /\*\*(?!/)
        beginCaptures:
          '0':
            name: punctuation.definition.comment.uc
        patterns:
          - begin: /\*
            name: comment.block.uc
            end: \*/

          - include: '#commentDoc'
        end: \*/
        endCaptures:
          '0':
            name: punctuation.definition.comment.uc

      - name: comment.block.uc
        begin: /\*
        beginCaptures:
          '0':
            name: punctuation.definition.comment.uc
        patterns:
          - begin: /\*
            name: comment.block.uc
            end: \*/
        end: \*/
        endCaptures:
          '0':
            name: punctuation.definition.comment.uc

  commentDoc:
    patterns:
      - match: (?:(@(?i)param)\:?\s*(\w+))
        captures:
          '1':
            name: storage.type.class.jsdoc.uc
          '2':
            name: variable.other.jsdoc.uc

      - match: (?:(@\w+))
        captures:
          '1':
            name: storage.type.class.jsdoc.uc

  directive:
    name: meta.preprocessor.macro.uc
    begin: ^\s*(\#)\s*\b(((?i)include|error)|((?i)call|exec|linenumber))\b
    beginCaptures:
      '1':
        name: punctuation.separator.hash.uc
      '3':
        name: keyword.control.directive.other.uc
      '4':
        name: keyword.preprocessor.directive.other.uc
    patterns:
      - include: '#comment'
      - include: '#expression' #technically incorrect, but this is nice to have.
    end: (?<=$)

  object-literal:
    begin: (\w+)\s*(')
    beginCaptures:
      '1':
        name: entity.name.type.class.uc
      '2':
        name: punctuation.definition.string.begin.uc
    patterns:
      - name: variable.other.constant.uc
        match: \w+

      - name: punctuation.accessor.uc
        match: \.
    # newlines are permitted at least in UE2
    end: (')|(?:[^ ",/:|&!\r\t])$
    endCaptures:
      '1':
        name: punctuation.definition.string.begin.uc
      '2':
        name: invalid.illegal.uc
    # contentName: string.quoted.single.uc

  name-literal:
    name: string.quoted.single.uc
    begin: (')
    beginCaptures:
      '0':
        name: punctuation.definition.string.begin.uc
    patterns:
      - include: '#string-character-escape'
    end: (')|((?:[^ ",\n\r\t])$)
    endCaptures:
      '1':
        name: punctuation.definition.string.end.uc
      '2':
        name: invalid.illegal.uc

  string-literal:
    name: string.quoted.double.uc
    begin: '"'
    beginCaptures:
      '0':
        name: punctuation.definition.string.begin.uc
    patterns:
      - include: '#string-character-escape'
    end: (")|((?:[^\n])$)
    endCaptures:
      '1':
        name: punctuation.definition.string.end.uc
      '2':
        name: invalid.illegal.newline.uc

  string-character-escape:
    name: constant.character.escape.uc
    match: \\.

  string:
    patterns:
      - include: '#name-literal'
      - include: '#string-literal'

  boolean-literal:
    patterns:
      - name: constant.language.boolean.false.uc
        match: \b(?i)false\b
      - name: constant.language.boolean.true.uc
        match: \b(?i)true\b

  numeric-literal:
    patterns:
      - name: constant.numeric.hex.uc
        match: 0(?:x|X)[0-9a-fA-F]+

    # Matches one of (.0ยก.0f|0.fยก0.0)
      - name: constant.numeric.decimal.uc
        match: '[0-9]*\.(?:(?:f|F)|[0-9]+(?:f|F))'

      - name: constant.numeric.decimal.uc
        match: '[0-9]+(?:f|F)?'

  # Anything that is a static value such as a literal but including some "special tokens"
  constant:
    patterns:
      - include: '#comment'

      - include: '#string'
      - include: '#numeric-literal'
      - include: '#boolean-literal'

      - name: constant.language.null.uc
        match: \b((?i)none)\b

      - begin: \b((?i)sizeof)\b
        beginCaptures:
          '0':
            name: keyword.constant.uc
        patterns:
          - begin: \(
            beginCaptures:
              '0':
                name: punctuation.parenthesis.open.uc
            patterns:
              - include: '#comment'
              - match: \w+
                name: entity.name.type.class.uc
            end: \)
            endCaptures:
              '0':
                name: punctuation.parenthesis.close.uc
        end: (?=;)

      # Including the parenthesis as part of the "begin" expression here.
      # - So that we can properly detect the ending of this special token when used as an expression.
      - begin: \b((?i)arraycount|nameof)\s*(\()?\b
        beginCaptures:
          '1':
            name: keyword.constant.uc
          '2':
            name: punctuation.parenthesis.open.uc
        patterns:
          - include: '#comment'
          - include: '#expression'
        end: (?=(\)))
        endCaptures:
          '0':
            name: punctuation.parenthesis.close.uc

      - begin: \b((?i)vect|rng|rot)\b
        beginCaptures:
          '0':
            name: keyword.constant.uc
        patterns:
          - begin: \(
            beginCaptures:
              '0':
                name: punctuation.parenthesis.open.uc
            patterns:
              - include: '#comment'
              - include: '#numeric-literal'
            end: \)
            endCaptures:
              '0':
                name: punctuation.parenthesis.close.uc
        end: (?=;|\b)

      - include: '#object-literal'

  declarations:
    patterns:
      - include: '#class-declaration'
      - include: '#interface-declaration'
      - include: '#type-declarations'
      - include: '#cpptext-block'
      - include: '#replication-block'
      - include: '#method-modifier'
      - include: '#method-declaration'
      - include: '#state-modifier'
      - include: '#state-declaration'
      - include: '#defaultproperties-block'
      - include: '#directive'

  type-declarations:
    patterns:
      - include: '#const-declaration'
      - include: '#enum-declaration'
      - include: '#struct-declaration'
      - include: '#var-declaration'

  type-modifier:
    patterns:
      - match: \b((?i)public|protected|protectedwrite|private|privatewrite|localized|native|intrinsic|const|editconst|config|globalconfig|transient|travel|input|export|noexport|cache|automated|edithide|editinline|editinlinenotify|editinlineuse|editconstarray|edfindable|init|editfixedsize|editoronly|editortextbox|noclear|noimport|serializetext|nontransactional|instanced|databinding|duplicatetransient|repretry|repnotify|interp|deprecated|notforconsole|archetype|crosslevelactive|crosslevelpassive)\b
        name: storage.modifier.uc

      # export modifier
      - begin: \{
        beginCaptures:
          '0':
            name: punctuation.curlybrace.open.uc
        patterns:
          - match: \w+
            name: storage.modifier.cpp
          # - include: source.cpp
        contentName: source.cpp
        end: (?<=\})
        endCaptures:
          '0':
            name: punctuation.curlybrace.close.uc

      # modifier params like config(id)
      - begin: \(
        beginCaptures:
          '0':
            name: punctuation.parenthesis.open.uc
        patterns:
          - match: \b(\w)\b
            captures:
              '1':
                name: string.unquoted.uc
        end: \)
        endCaptures:
          '0':
            name: punctuation.parenthesis.close.uc

  type-declaration:
    patterns:
      - include: '#comment'
      - include: '#type-modifier'

      - begin: \b(?:((?i)float|int|byte|bool|button|name|string|pointer|array|map|delegate)|(?:(\w+)(?:\s*\.\s*(\w+))*))\b
        beginCaptures:
          '0':
            name: meta.type.annotation.uc
          '1':
            name: storage.type.primitive.uc
          '2':
            name: entity.name.type.uc
          '3':
            name: entity.name.type.uc
        patterns:
          - include: '#comment'

          # Delimmiter e.g. Array<string>
          - begin: \<
            beginCaptures:
              '0':
                name: punctuation.definition.typeparameters.begin.uc
            patterns:
              - include: '#inlined-declaration'
            end: \>
            endCaptures:
              '0':
                name: punctuation.definition.typeparameters.end.uc

          # String size
          - begin: \[
            patterns:
              - include: '#numeric-literal'
              - match: \w+
                captures:
                  '1':
                    name: variable.object.uc
            end: \]

          # export type
          - begin: \{
            beginCaptures:
              '0':
                name: punctuation.curlybrace.open.uc
            patterns:
              - include: '#inlined-cpp'
            contentName: source.cpp
            end: (?<=\})
            endCaptures:
              '0':
                name: punctuation.curlybrace.close.uc

          - begin: \w+
            beginCaptures:
              '0':
                name: variable.uc
            patterns:
              # array dimension
              - begin: \[
                patterns:
                  - include: '#numeric-literal'
                  - match: \w+
                    captures:
                      '1':
                        name: variable.object.uc
                end: \]

              # metadata
              - begin: \<
                beginCaptures:
                  '0':
                    name: punctuation.definition.metadata.begin
                patterns:
                  - match: (\w+)(\s*(=)\s*([^\||\>]+)?)?
                    captures:
                      '1':
                        name: entity.name.metadata.key.uc
                      '3':
                        name: keyword.operator.assignment.uc
                      '4':
                        name: string.uc
                end: \>
                endCaptures:
                  '0':
                    name: punctuation.definition.metadata.end

              # export pointer type
              - begin: \{
                beginCaptures:
                  '0':
                    name: punctuation.curlybrace.open.uc
                patterns:
                  - include: '#inlined-cpp'
                contentName: source.cpp
                end: (?<=\})
                endCaptures:
                  '0':
                    name: punctuation.curlybrace.close.uc
            end: (?=\;|\,)
        end: (\;)|(\))
        endCaptures:
          '1':
            name: 'punctuation.semicolon.uc'
          '2':
            name: 'punctuation.parenthesis.close.uc'

  inlined-cpp:
    patterns:
      - include: '#comment'

      # Disabled because cpp may consume too many characters.
      # - include: source.cpp

      - match: \,
        name: 'punctuation.comma.uc'

      - match: \b(?:(?i)(class)|(struct))\b
        captures:
          '1':
            name: storage.type.class.cpp
          '2':
            name: storage.type.struct.cpp

      - match: (\w+)(?:(\*)|(\&))*
        captures:
          '1':
            name: entity.name.type.cpp
          '2':
            name: storage.modifier.pointer.cpp
          '3':
            name: storage.modifier.reference.cpp

  inlined-declaration:
    patterns:
      - include: '#comment'
      - include: '#type-modifier'

        # predefined alias types
      - match: \b((?i)float|int|byte|bool|button|name|string|pointer|array|map|delegate)\b
        name: keyword.type.primitive.uc

        # Delimmiter e.g. array<string>, or Class<Object>
      - begin: \<
        beginCaptures:
          '0':
            name: punctuation.definition.typeparameters.begin.uc
        patterns:
          - include: '#inlined-declaration'
        end: \>
        endCaptures:
          '0':
            name: punctuation.definition.typeparameters.end.uc

      - include: '#enum-declaration'
      - include: '#struct-declaration'

        # Qualified type id e.g. Actor.ERemoteRole
      - match: \w+
        name: entity.name.type.uc

  interface-declaration:
    name: meta.interface.uc
    begin: (?=\b((?i)interface)\b)
    end: \;
    endCaptures:
      '0':
        name: punctuation.semicolon.uc
    patterns:
      - include: '#comment'

      - match: ^\b((?i)interface)\b(?<id>\s*\w+)?
        captures:
          '1':
            name: storage.type.interface.uc
          '2':
            name: entity.name.type.interface.uc

      - match: \b((?i)extends)\b(?:\s*(\w+)(?:\s*\.\s*(\w+))?)?
        captures:
          '1':
            name: storage.modifier.extends.uc
          '2':
            name: entity.other.inherited-class.uc
          '3':
            name: entity.other.inherited-class.uc

      - match: \b((?i)editinlinenew)\b
        name: storage.modifier.uc

      # modifiers with an optional single param (id)
      - match: \b((?i)native|nativeonly)\b
        name: storage.modifier.uc

      # modifiers with multiple params (..., id)
      - begin: \b((?i)dependson)\b
        beginCaptures:
          '1':
            name: storage.modifier.uc
          '2':
            name: entity.name.type.interface.uc
        patterns:
          - include: '#comment'

          - begin: \(
            beginCaptures:
              '0':
                name: punctuation.parenthesis.open.uc
            patterns:
              - include: '#comment'

              - match: \w+
                name: entity.name.type.uc

              - match: \,
                name: punctuation.separator.uc
            end: \)
            endCaptures:
              '0':
                name: punctuation.parenthesis.close.uc
        end: (?<=\))

      - begin: \(
        beginCaptures:
          '0':
            name: punctuation.parenthesis.open.uc
        patterns:
          - include: '#comment'

          - match: \w+
            name: string.unquoted.uc

          - match: \,
            name: punctuation.separator.uc
        end: \)
        endCaptures:
          '0':
            name: punctuation.parenthesis.close.uc

      - match: \w+
        name: storage.modifier.undetermined.uc

  class-declaration:
    name: meta.class.uc
    begin: (?=\b((?i)class)\b)
    end: \;
    endCaptures:
      '0':
        name: punctuation.semicolon.uc
    patterns:
      - include: '#comment'

      - match: ^\b((?i)class)\b(?<id>\s*\w+)?
        captures:
          '1':
            name: storage.type.class.uc
          '2':
            name: entity.name.type.class.uc

      - match: \b((?i)extends|expands)\b(?:\s*(\w+)(?:\s*\.\s*(\w+))?)?
        captures:
          '1':
            name: storage.modifier.extends.uc
          '2':
            name: entity.other.inherited-class.uc
          '3':
            name: entity.other.inherited-class.uc

      - match: \b((?i)within)\b(?:\s*(\w+)(?:\s*\.\s*(\w+))?)?
        captures:
          '1':
            name: storage.modifier.within.uc
          '2':
            name: entity.other.inherited-class.uc
          '3':
            name: entity.other.inherited-class.uc

      - match: \b((?i)abstract|export|exportstructs|noexport|noexportheader|nativereplication|deprecated|transient|nontransient|nousercreate|notplaceable|placeable|safereplace|parseconfig|hidedropdown|editinlinenew|noteditinlinenew|cacheexempt|perobjectconfig|perobjectlocalized|forcescriptorder|instanced|localized)\b
        name: storage.modifier.uc

      # modifiers with an optional single param
      - match: \b((?i)config|native|intrinsic|nativeonly)\b
        name: storage.modifier.uc

      # modifiers with multiple string params (..., id)
      - match: \b((?i)hidecategories|showcategories|autocollapsecategories|dontautocollapsecategories|autoexpandcategories|dontsortcategories|collapsecategories|dontcollapsecategories|classgroup)\b
        name: storage.modifier.uc

      # modifiers with multiple params (..., id)
      - begin: \b((?i)dllbind|inherits|dependson|implements|classredirect)\b
        beginCaptures:
          '1':
            name: storage.modifier.uc
        patterns:
          - include: '#comment'

          - begin: \(
            beginCaptures:
              '0':
                name: punctuation.parenthesis.open.uc
            patterns:
              - include: '#comment'

              - match: \w+
                name: entity.name.type.uc

              - match: \,
                name: punctuation.separator.uc
            end: \)
            endCaptures:
              '0':
                name: punctuation.parenthesis.close.uc
        end: (?<=\))

      # modifier params
      - begin: \(
        beginCaptures:
          '0':
            name: punctuation.parenthesis.open.uc
        patterns:
          - include: '#comment'

          - match: \w+
            name: string.unquoted.uc

          - match: \,
            name: punctuation.separator.uc
        end: \)
        endCaptures:
          '0':
            name: punctuation.parenthesis.close.uc

      - match: \w+
        name: storage.modifier.undetermined.uc

  const-declaration:
    name: meta.definition.variable.uc
    begin: \b((?i)const)\b(?<id>\s*\w+)?
    beginCaptures:
      '1':
        name: storage.type.constant.uc
      '2':
        name: variable.other.constant.uc
    patterns:
      - include: '#comment'

      - match: (\=)
        name: keyword.operator.assignment.uc

      - include: '#constant'
    end: \;
    endCaptures:
      '0':
        name: punctuation.terminator.statement.uc

  enum-declaration:
    name: meta.enum.declaration.uc
    begin: \b((?i)enum)\b(?<id>\s*\w+)?
    beginCaptures:
      '1':
        name: storage.type.enum.uc
      '2':
        name: entity.name.type.enum.uc
    patterns:
      - include: '#comment'

      - name: meta.block.uc
        begin: \{
        beginCaptures:
          '0':
            name: punctuation.definition.block.uc
        patterns:
          - include: '#comment'
          - match: \w+
            name: variable.other.enummember.uc
        end: \}
        endCaptures:
          '0':
            name: punctuation.definition.block.uc
    end: (?<=\}|(\;))
    endCaptures:
      '1':
        name: punctuation.semicolon.uc

  struct-declaration:
    name: meta.struct.declaration.uc
    begin: \b((?i)struct)\b\s*(?<exportId>\{(?:\w+)?\})?
    beginCaptures:
      '1':
        name: storage.type.struct.uc
      '2':
        name: meta.embedded.block.cpp.uc
        patterns:
          - contentName: source.cpp
            begin: \{
            beginCaptures:
              '0':
                name: punctuation.curlybrace.open.uc
            patterns:
              - include: source.cpp
            end: \}
            endCaptures:
              '0':
                name: punctuation.curlybrace.close.uc
    patterns:
      - include: '#comment'

      - match: \b((?i)native|intrinsic|transient|export|strictconfig|atomic|atomicwhencooked|immutable|immutablewhencooked|init|long)\b
        name: storage.modifier.uc

      - match: \b((?i)extends|expands)\b(?:\s+(\w+)(?:\s*\.\s*(\w+))?)?
        captures:
          '1':
            name: storage.modifier.extends.uc
          '2':
            name: entity.other.inherited-class.uc
          '3':
            name: entity.other.inherited-class.uc

      # Cannot be part of the `begin` rule because otherwise it would mistake a modifier for the entity's name.
      - match: \b((?i)\w+)\b
        name: entity.name.type.struct.uc

      - name: meta.block.uc
        begin: \{
        beginCaptures:
          '0':
            name: punctuation.definition.block.uc
        patterns:
          - include: '#comment'
          - include: '#type-declarations'
          - include: '#structcpptext-block'
          - include: '#structdefaultproperties-block'
          - include: '#directive'
        end: (?>\})
        endCaptures:
          '0':
            name: punctuation.definition.block.uc
    end: (\;|(?=\>))

  var-declaration:
    name: meta.definition.variable.uc
    begin: \b((?i)var)\b
    beginCaptures:
      '1':
        name: storage.type.variable.uc
    patterns:
      - include: '#comment'

      - begin: \(
        beginCaptures:
          '0':
            name: punctuation.parenthesis.open.uc
        patterns:
          - include: '#comment'

          - match: \w+
            name: string.unquoted.uc

          - match: \,
            name: punctuation.separator.category.uc
        end: \)
        endCaptures:
          '0':
            name: punctuation.parenthesis.close.uc

      - include: '#enum-declaration'
      - include: '#struct-declaration'
      - include: '#type-declaration'
    end: (?<=\;)

  method-modifier:
    patterns:
      - match: \b((?i)static|final|simulated|public|protected|private|exec|iterator|latent|singular|const|noexport|noexportheader|virtual|dllimport|native|intrinsic|transient|k2call|k2override|k2pure)\b(\s*\(\s*([0-9]*)\s*\))?
        captures:
          '1':
            name: storage.modifier.uc
          '3':
            name: constant.numeric.uc

      - match: \b((?i)unreliable|reliable|server|client|demorecording)\b
        captures:
          '1':
            name: keyword.control.flow.uc

      # export modifier
      - begin: \{
        beginCaptures:
          '0':
            name: punctuation.curlybrace.open.uc
        patterns:
          - match: \w+
            name: storage.modifier.cpp
        contentName: source.cpp
        end: \}
        endCaptures:
          '0':
            name: punctuation.curlybrace.close.uc

  method-declaration:
    name: meta.function.uc
    begin: (\b(?i)(function)|(event)|(delegate)|(preoperator)|(postoperator)\b)|(?:(\b(?i)operator\b)((\s*\(\s*([0-9]*)\s*\)))?)
    end: (?<=\}|\;)
    beginCaptures:
      '1':
        name: keyword.other.method.uc
      '2':
        name: keyword.other.function.uc
      '3':
        name: keyword.other.event.uc
      '4':
        name: keyword.other.delegate.uc
      '5':
        name: keyword.other.operator.pre.uc
      '6':
        name: keyword.other.operator.post.uc
      '7':
        name: keyword.other.operator.uc
      '10':
        name: constant.numeric.uc
    patterns:
      - include: '#comment'

      # Method without a specified return type
      - name: meta.parameters.uc
        begin: (?:(\w+)|(\W+))\s*(\()
        beginCaptures:
          '1':
            name: entity.name.function.uc
          '2':
            name: entity.name.operator.uc
          '3':
            name: punctuation.parenthesis.open.uc
        patterns:
          - include: '#parameter-declaration'
        end: (?<=\))
        endCaptures:
          '1':
            name: punctuation.parenthesis.close.uc

      # Return type?
      - match: \b(?:(?i)coerce)\b
        name: storage.modifier.uc

      - name: meta.type.annotation.uc
        begin: \b(?:((?i)float|int|byte|bool|button|name|string|pointer|array|map|delegate)|(?<type>\w+))\b
        beginCaptures:
          '1':
            name: storage.type.primitive.uc
          '2':
            name: entity.name.type.uc
        patterns:
          - include: '#comment'

          # Delimmiter e.g. Array<string>
          - begin: \<
            beginCaptures:
              '0':
                name: punctuation.definition.typeparameters.begin.uc
            patterns:
              - include: '#inlined-declaration'
            end: \>
            endCaptures:
              '0':
                name: punctuation.definition.typeparameters.end.uc

          # String size
          - begin: \[
            patterns:
              - include: '#comment'
              - include: '#numeric-literal'

              - match: (\w+)
                captures:
                  '1':
                    name: variable.object.uc
            end: \]

          # export type
          - begin: \{
            beginCaptures:
              '0':
                name: punctuation.curlybrace.open.uc
            patterns:
              - include: '#inlined-cpp'
            contentName: source.cpp
            end: \}
            endCaptures:
              '0':
                name: punctuation.curlybrace.close.uc

          - name: meta.parameters.uc
            begin: (?:(\w+)|(\W+))\s*(\()
            beginCaptures:
              '1':
                name: entity.name.function.uc
              '2':
                name: entity.name.operator.uc
              '3':
                name: punctuation.parenthesis.open.uc
            patterns:
              - include: '#parameter-declaration'
            end: (?<=\))
            endCaptures:
              '1':
                name: punctuation.parenthesis.close.uc
        end: (?<=\)|;)

      - match: \b(?:(?i)const)\b
        name: storage.modifier.uc

        #method body
      - name: meta.block.uc
        begin: \{
        beginCaptures:
          '0':
            name: punctuation.curlybrace.open.uc
        patterns:
          - include: '#local-declaration'
          - include: '#statement'
        end: \}
        endCaptures:
          '0':
            name: punctuation.curlybrace.close.uc

  param-modifier:
    name: storage.modifier.uc
    match: \b(?:(?i)optional|out|coerce|const|init|skip|ref)\b

  parameter-declaration:
    name: meta.parameters.uc
    patterns:
      - include: '#comment'
      - include: '#param-modifier'
      - name: meta.type.annotation.uc
        begin: \b(?:((?i)float|int|byte|bool|button|name|string|pointer|array|map|delegate)|(?<type>\w+))\b
        beginCaptures:
          '1':
            name: storage.type.primitive.uc
          '2':
            name: entity.name.type.uc
        patterns:
          - include: '#comment'

          # Delimmiter e.g. Array<string>
          - begin: \<
            beginCaptures:
              '0':
                name: punctuation.definition.typeparameters.begin.uc
            patterns:
              - include: '#inlined-declaration'
            end: \>
            endCaptures:
              '0':
                name: punctuation.definition.typeparameters.end.uc

          # String size
          - begin: \[
            patterns:
              - include: '#comment'
              - include: '#numeric-literal'

              - match: (\w+)
                captures:
                  '1':
                    name: entity.name.variable.object.uc
            end: \]

          # export type
          - begin: \{
            beginCaptures:
              '0':
                name: punctuation.curlybrace.open.uc
            patterns:
              - include: '#inlined-cpp'
            contentName: source.cpp
            end: \}
            endCaptures:
              '0':
                name: punctuation.curlybrace.close.uc

          - match: (\w+)
            captures:
              '1':
                name: variable.parameter.uc
        end: (?=\,)|(?<=\))

  local-declaration:
    name: meta.definition.variable.uc
    begin: \b((?i)local)\b
    beginCaptures:
      '1':
        name: storage.type.variable.uc
    patterns:
      - include: '#comment'
      - include: '#type-declaration'
    end: (?<=\;)

  state-modifier:
    match: \b((?i)auto|simulated)\b
    captures:
      '1':
        name: storage.modifier.uc

  state-declaration:
    name: meta.state.declaration.uc
    begin: \b((?i)state)\b(?:\s*\(\s*\))?(?<id>\s*\w+)?
    beginCaptures:
      '1':
        name: storage.type.state.uc
      '2':
        name: entity.name.type.state.uc
    patterns:
      - include: '#comment'

      - match: \b((?i)extends|expands)\b(?<id>\s*\w+)?
        captures:
          '1':
            name: storage.modifier.extends.uc
          '2':
            name: entity.other.inherited-class.uc

      - name: meta.block.uc
        begin: \{
        beginCaptures:
          '0':
            name: punctuation.definition.block.uc
        patterns:
          - include: '#comment'
          - include: '#const-declaration'
          - include: '#local-declaration'
          # TODO: Must be invalid within a labeled-block
          - begin: \b((?i)ignores)\b
            beginCaptures:
              '1':
                name: keyword.other.ignores.uc
            patterns:
              - match: (\w+)
                name: entity.name.function.uc
            end: \;
            endCaptures:
              '0':
                name: punctuation.semicolon.uc
          - include: '#method-modifier'
          - include: '#method-declaration'
          - include: '#statement'
        end: \}
        endCaptures:
          '0':
            name: punctuation.definition.block.uc
    end: (?<=\}|\;)

  cpptext-block:
    begin: \b((?i)cpptext)\b
    beginCaptures:
      '1':
        name: keyword.other.cpptext.uc
    patterns:
      - include: '#comment'

      - name: meta.embedded.block.cpp.uc
        begin: \{
        beginCaptures:
          '0':
            name: punctuation.curlybrace.open.uc
        patterns:
          - include: source.cpp
        end: \}
        endCaptures:
          '0':
            name: punctuation.curlybrace.close.uc
    end: (?<=\})

  structcpptext-block:
    begin: \b((?i)structcpptext|cppstruct)\b
    beginCaptures:
      '1':
        name: keyword.other.cpptext.uc
    patterns:
      - include: '#comment'

      - name: meta.embedded.block.cpp.uc
        begin: \{
        beginCaptures:
          '0':
            name: punctuation.curlybrace.open.uc
        patterns:
          - include: source.cpp
        end: \}
        endCaptures:
          '0':
            name: punctuation.curlybrace.close.uc
    end: (?<=\})

  replication-block:
    begin: \b((?i)replication)\b
    beginCaptures:
      '1':
        name: keyword.other.replication.uc
    patterns:
      - include: '#comment'

      - name: meta.block.uc
        begin: \{
        beginCaptures:
          '0':
            name: punctuation.curlybrace.open.uc
        patterns:
          - include: '#comment'

          - begin: (?:\b((?i)unreliable|reliable)\b(?:\s+((?i)always)\b)?)?\s*\b((?i)if)\b
            beginCaptures:
              '1':
                name: keyword.control.flow.uc
              '2':
                name: keyword.control.flow.uc
              '3':
                name: keyword.control.conditional.uc
            patterns:
              - include: '#comment'

              - begin: \(
                beginCaptures:
                  '0':
                    name: punctuation.parenthesis.open.uc
                patterns:
                  - include: '#expression'
                end: \)
                endCaptures:
                  '0':
                    name: punctuation.parenthesis.close.uc

              - name: variable.other.member.uc
                match: (\w+)
            end: \;
            endCaptures:
              '0':
                name: punctuation.terminator.statement.uc
        end: \}
        endCaptures:
          '0':
            name: punctuation.curlybrace.close.uc
    end: (?<=\})

  statement:
    patterns:
      - include: '#comment'
      - include: '#const-declaration'

      - match: \;
        name: punctuation.terminator.statement.uc

      - match: ((\w+)\s*(\:))
        captures:
          '1':
            name: entity.name.label.uc
          '2':
            name: punctuation.separator.label.uc

      - begin: \b(?:(?i)switch)(?x)\b
        beginCaptures:
          '0':
            name: keyword.control.switch.uc
        patterns:
          - include: '#parenthesis-expression'
          - name: meta.block.uc
            begin: \{
            beginCaptures:
              '0':
                name: punctuation.curlybrace.open.uc
            patterns:
              - include: '#switch-statement'
            end: \}
            endCaptures:
              '0':
                name: punctuation.curlybrace.close.uc
        end: (?<=\})

      - name: keyword.control.loop.uc
        match: \b(?:(?i)for|while|until)\b
        patterns:
          - include: '#parenthesis-expression'

      - name: keyword.control.loop.uc
        match: \b(?:(?i)foreach|do)\b

      - name: keyword.control.loop.uc
        match: \b(?:(?i)continue|break)\b

      - name: keyword.control.flow.uc
        match: \b(?:(?i)return|stop)\b

      - name: keyword.control.conditional.uc
        match: \b(?:(?i)if|else)\b
        patterns:
          - include: '#parenthesis-expression'

      - name: keyword.control.conditional.assert.uc
        match: \b(?:(?i)assert)\b
        patterns:
          - include: '#expression'

      - name: keyword.control.conditional.goto.uc
        match: \b(?:(?i)goto)\b
        patterns:
          - include: '#expression'

      - name: meta.block.uc
        begin: \{
        beginCaptures:
          '0':
            name: punctuation.curlybrace.open.uc
        patterns:
          - include: '#statement'
        end: \}
        endCaptures:
          '0':
            name: punctuation.curlybrace.close.uc

      - include: '#expression'
      - include: '#directive'

  switch-statement:
    name: switch-statement.uc
    patterns:
      - include: '#comment'

      - name: case-clause.uc
        begin: \b(?:(?i)case)\b
        beginCaptures:
          '0':
            name: keyword.control.switch.uc
        patterns:
          - include: '#expression'
        end: (\:)

      - name: case-clause.uc
        begin: \b((?i)default)\b(?:\s*\:)
        beginCaptures:
          '1':
            name: keyword.control.switch.uc
        end: (?<=\:)

      - include: '#statement'

  expression:
    patterns:
      - include: '#comment'

      - name: meta.array.literal.uc
        begin: \[
        beginCaptures:
          '0':
            name: meta.brace.square.uc
        patterns:
          - include: '#expression'
        end: \]
        endCaptures:
          '0':
            name: meta.brace.square.uc

      - name: keyword.operator.assignment.compound.uc
        match: (\*=|(?<!\()/=|%=|\+=|\-=|\$=|\@=)

      # UnrealScript doesn't support any compound bitwise assigment operators
      # - name: "keyword.operator.assignment.compound.bitwise.uc"
      # match:

      - name: keyword.operator.bitwise.shift.uc
        match: (<<|>>>|>>)

      - name: keyword.operator.comparison.uc
        match: (==|!=|~=)

      - name: keyword.operator.relational.uc
        match: (<=|>=|<|>)

      - name: keyword.operator.logical.uc
        match: (\!|&&|\|\||\^\^)

      - name: keyword.operator.bitwise.uc
        match: (\&|~|\^|\|)

      - name: keyword.operator.assignment.uc
        match: (\=)

      - name: keyword.operator.decrement.uc
        match: (--)

      - name: keyword.operator.increment.uc
        match: (\+\+)

      - name: keyword.operator.arithmetic.uc
        match: (%|\*|/|-|\+|\#|\$|\@)

      - name: variable.language.this.uc
        match: \b(?:(?i)self)\b

      - match: \b((?i)global|default|static|const)\b(?:\s*\.)\b
        captures:
          '1':
            name: variable.language.this.uc

      - match: \b((?i)super)\b(?:\s*\(\s*(\w+\s*)\))?
        captures:
          '1':
            name: variable.language.super.uc
          '2':
            name: entity.other.inherited-class.uc

      # meta-class casting
      - begin: \b((?i)class)\b\s*(\<)
        beginCaptures:
          '0':
            name: cast.expr.uc
          '1':
            name: entity.name.type.class.uc
          '2':
            name: punctuation.arrow.open.uc
        patterns:
          - match: (\w+)
            name: entity.name.type.class.uc
        end: \>
        endCaptures:
          '0':
            name: punctuation.arrow.close.uc

      # primitive castings
      - begin: \b((?i)byte|float|int|string|name|bool|button)\b\s*(\()
        beginCaptures:
          '0':
            name: cast.expr.uc
          '1':
            name: keyword.type.uc
          '2':
            name: punctuation.parenthesis.open.uc
        patterns:
          - include: '#expression'
        end: \)
        endCaptures:
          '0':
            name: punctuation.parenthesis.close.uc

      # Predefined struct casting. UC only supports casting for two struct types.
      - begin: \b((?i)vector|rotator)\b\s*(\()
        beginCaptures:
          '0':
            name: cast.expr.uc
          '1':
            name: entity.name.type.struct.uc
          '2':
            name: punctuation.parenthesis.open.uc
        patterns:
          - include: '#expression'
        end: \)
        endCaptures:
          '0':
            name: punctuation.parenthesis.close.uc

      # new operator
      - match: \b((?i)new)\b
        name: new.expr.uc
        captures:
          '1':
            name: keyword.operator.new.uc

      - include: '#constant'

      - begin: (\w+)\s*(\()
        beginCaptures:
          '0':
            name: meta.function-call.uc
          '1':
            name: entity.name.function.uc
            # Doesn't get any highlighting
            # name: variable.function.uc
          '2':
            name: punctuation.parenthesis.open.uc
        patterns:
          - include: '#expression'
        end: \)
        endCaptures:
          '0':
            name: punctuation.parenthesis.close.uc

      # - name: variable.other.property.uc
      #   match: \.\s*\w+

      # - name: variable.other.object.uc
      #   match: \w+\s*\.

      - name: variable.other.uc
        match: \w+

      - name: punctuation.accessor.uc
        match: \.

      - name: punctuation.separator.comma.uc
        match: \,

      - include: '#parenthesis-expression'

  parenthesis-expression:
    name: punctuation.definition.expression
    begin: \(
    beginCaptures:
      '0':
        name: punctuation.parenthesis.open.uc
    patterns:
      - include: '#expression'
    end: \)
    endCaptures:
      '0':
        name: punctuation.parenthesis.close.uc

  propertiesBlock:
    patterns:
      - include: '#comment'

      - begin: \b((?i)begin)\b\s*\b((?i)object)\b
        beginCaptures:
          '1':
            name: keyword.other.uc
          '2':
            name: keyword.other.uc
        patterns:
          - include: '#propertiesBlock'
        end: \b((?i)end)\b\s*\b((?i)object)\b
        endCaptures:
          '1':
            name: keyword.other.uc
          '2':
            name: keyword.other.uc

      - include: '#propertiesStatement'

  propertiesStatement:
    patterns:
      - name: meta.block.uc
        begin: \{
        beginCaptures:
          '0':
            name: punctuation.curlybrace.open.uc
        patterns:
          - include: '#expression'
        end: \}
        endCaptures:
          '0':
            name: punctuation.curlybrace.close.uc
      - include: '#expression'

  propertiesExpression:
    patterns:
      - include: '#expression'

  defaultproperties-block:
    begin: \b((?i)defaultproperties)\b
    beginCaptures:
      '1':
        name: keyword.other.defaultproperties.uc
    patterns:
      - include: '#comment'

      - name: meta.block.uc
        begin: \{
        beginCaptures:
          '0':
            name: punctuation.curlybrace.open.uc
        patterns:
          - include: '#propertiesBlock'
        end: \}
        endCaptures:
          '0':
            name: punctuation.curlybrace.close.uc
    end: (?<=\})

  structdefaultproperties-block:
    begin: \b((?i)structdefaultproperties)\b
    beginCaptures:
      '1':
        name: keyword.other.structdefaultproperties.uc
    patterns:
      - include: '#comment'

      - name: meta.block.uc
        begin: \{
        beginCaptures:
          '0':
            name: punctuation.curlybrace.open.uc
        patterns:
          - include: '#propertiesBlock'
        end: \}
        endCaptures:
          '0':
            name: punctuation.curlybrace.close.uc
    end: (?<=\})

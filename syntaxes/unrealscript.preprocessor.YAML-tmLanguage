# [PackageDev] target_format: json, ext: tmLanguage
# Syntax highlighting for the UnrealScript Preprocessor language:
# https://docs.unrealengine.com/udk/Three/UnrealScriptPreprocessor.html
---
name: UnrealScript Preprocessor Syntax Definition (UPP)
fileTypes: [.uci, .uc]
scopeName: source.upp
uuid: 620e5cd2-939d-42b8-9943-4927e876320f

patterns:
  - include: '#comment'
  - include: '#preprocessor'
  - include: '#unrealscript'

repository:
  comment:
    patterns:
      - include: '#blockComment'

      - name: comment.line.double-slash.upp
        begin: //
        end: \n

  blockComment:
    patterns:
      - name: comment.block.documentation.upp
        begin: /\*\*(?!/)
        beginCaptures:
          '0':
            name: punctuation.definition.comment.upp
        patterns:
          - begin: /\*
            name: comment.block.upp
            end: \*/
        end: \*/
        endCaptures:
          '0':
            name: punctuation.definition.comment.upp

      - name: comment.block.upp
        begin: /\*
        beginCaptures:
          '0':
            name: punctuation.definition.comment.upp
        patterns:
          - begin: /\*
            name: comment.block.upp
            end: \*/
        end: \*/
        endCaptures:
          '0':
            name: punctuation.definition.comment.upp

  preprocessor:
    name: meta.preprocessor.macro.upp
    begin: \`
    beginCaptures:
      '0':
        name: punctuation.definition.grave.upp
    end: \n|$
    patterns:
      - begin: \{
        beginCaptures:
          '0':
            name: punctuation.curlybrace.open.upp
        patterns:
          - match: \w+
            name: entity.name.function.preprocessor.upp
        end: \}
        endCaptures:
          '0':
            name: punctuation.curlybrace.close.upp

      - begin: \b(((?i)if)|((?i)elseif)|((?i)ifdef)|((?i)ifndef))\b
        beginCaptures:
          '1':
            name: keyword.control.directive.if.upp
          '2':
            name: keyword.control.directive.elseif.upp
          '3':
            name: keyword.control.directive.ifdef.upp
          '4':
            name: keyword.control.directive.ifndef.upp
        patterns:
          - include: '#preprocessor-invoke'
        end: (?<=$)

      - begin: \b(?:((?i)isdefined)|((?i)notdefined))\b
        beginCaptures:
          '1':
            name: keyword.control.directive.isdefined.upp
          '2':
            name: keyword.control.directive.notdefined.upp
        patterns:
          - include: '#preprocessor-arguments'
        end: (?<=$)

      - match: \b((?i)else)\b
        name: keyword.control.directive.else.upp

      - match: \b((?i)endif)\b
        name: keyword.control.directive.endif.upp

      - begin: \b((?i)define)\b(?:[\s^\n](\w+))?
        beginCaptures:
          '1':
            name: keyword.control.directive.define.upp
          '2':
            name: entity.name.function.preprocessor.upp
        patterns:
          - begin: \(
            patterns:
              - match: \w+
                name: entity.name.function.preprocessor.upp
              - match: \,
                name: punctuation.comma.upp
              - match: \#
                name: invalid.illegal.upp
            end: \)

        #   - include: '#preprocessor'

          - match: (?:(\\\\)([^\n]*)\r?\n)
            captures:
              '1':
                name: constant.character.escape.line-continuation.upp
              '2':
                name: invalid.illegal.upp
        end: $

      - begin: \b((?i)undefine)\b
        beginCaptures:
          '1':
            name: keyword.control.directive.undefine.upp
          '2':
            name: variable.other.upp
        patterns:
          - include: '#preprocessor-arguments'
        end: $

      - begin: \b((?i)include)\b
        beginCaptures:
          '1':
            name: keyword.control.directive.include.upp
        contentName: meta.preprocessor.include.upp
        patterns:
          - include: '#preprocessor-arguments'
        end: $

      # Custom macro
      - match: \w+
        name: entity.name.function.preprocessor.upp

  preprocessor-invoke:
    begin: \(
    patterns:
    #   - include: '#preprocessor'

      - match: \w+
        name: entity.name.function.preprocessor.upp

      - match: \,
        name: punctuation.comma.upp
    end: \)

  preprocessor-arguments:
    begin: \(
    patterns:
    #   - include: '#preprocessor'

      - match: \w+
        name: entity.name.parameter.preprocessor.upp

      - match: \,
        name: punctuation.comma.upp
    end: \)

  unrealscript:
    name: meta.embedded.block.unrealscript.upp
    patterns:
      - include: source.uc
